import os
import shutil
import json
from datetime import datetime

# Carpeta donde se almacenar√°n las versiones
VCS_DIR = ".vcs"
COMMITS_FILE = os.path.join(VCS_DIR, "commits.json")

def init():
    """Inicializa el sistema de control de versiones."""
    if not os.path.exists(VCS_DIR):
        os.mkdir(VCS_DIR)
        with open(COMMITS_FILE, "w") as f:
            json.dump([], f)
        print("‚úÖ Repositorio inicializado en la carpeta actual.")
    else:
        print("‚ö†Ô∏è Ya existe un repositorio en este directorio.")

def commit(filename, message):
    """Guarda una nueva versi√≥n del archivo."""
    if not os.path.exists(VCS_DIR):
        print("‚ùå No hay repositorio inicializado. Ejecuta primero 'init'.")
        return

    if not os.path.exists(filename):
        print(f"‚ùå El archivo '{filename}' no existe.")
        return

    # Cargar historial existente
    with open(COMMITS_FILE, "r") as f:
        commits = json.load(f)

    version_num = len(commits) + 1
    version_file = os.path.join(VCS_DIR, f"{version_num}_{os.path.basename(filename)}")

    # Copiar el archivo como nueva versi√≥n
    shutil.copy2(filename, version_file)

    # Registrar el commit
    commits.append({
        "version": version_num,
        "filename": filename,
        "message": message,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(COMMITS_FILE, "w") as f:
        json.dump(commits, f, indent=4)

    print(f"‚úÖ Commit {version_num} guardado: {message}")

def log():
    """Muestra el historial de commits."""
    if not os.path.exists(COMMITS_FILE):
        print("‚ùå No hay historial de commits.")
        return

    with open(COMMITS_FILE, "r") as f:
        commits = json.load(f)

    if not commits:
        print("üì≠ No hay commits registrados todav√≠a.")
        return

    print("\n=== HISTORIAL DE COMMITS ===")
    for c in commits:
        print(f"Versi√≥n {c['version']}: '{c['message']}' ({c['timestamp']})")
    print("=============================\n")

def restore(version):
    """Restaura una versi√≥n anterior del archivo."""
    if not os.path.exists(COMMITS_FILE):
        print("‚ùå No hay commits para restaurar.")
        return

    with open(COMMITS_FILE, "r") as f:
        commits = json.load(f)

    for c in commits:
        if c["version"] == version:
            version_file = os.path.join(VCS_DIR, f"{version}_{os.path.basename(c['filename'])}")
            shutil.copy2(version_file, c["filename"])
            print(f"üîÑ Versi√≥n {version} restaurada en '{c['filename']}'")
            return

    print(f"‚ùå No se encontr√≥ la versi√≥n {version}.")

# === Programa principal ===
def main():
    print("=== Mini Sistema de Control de Versiones ===")
    print("Comandos disponibles: init, commit <archivo> <mensaje>, log, restore <n√∫mero>")
    while True:
        cmd = input("\n> ").strip().split(" ", 2)
        if cmd[0] == "init":
            init()
        elif cmd[0] == "commit" and len(cmd) >= 3:
            commit(cmd[1], cmd[2])
        elif cmd[0] == "log":
            log()
        elif cmd[0] == "restore" and len(cmd) >= 2:
            try:
                restore(int(cmd[1]))
            except ValueError:
                print("‚ùå N√∫mero de versi√≥n inv√°lido.")
        elif cmd[0] in ("exit", "quit"):
            print("üëã Saliendo del sistema...")
            break
        else:
            print("‚öôÔ∏è Comando no reconocido.")

if __name__ == "__main__":
    main()
